##
# Model storing common words from the Sphinx search index.
#
# Used for auto-complete functionality on the collection search form.
#
class SearchIndexWord < ActiveRecord::Base
  validates_presence_of :text
  validates_uniqueness_of :text
  validates_length_of :text, :minimum => ThinkingSphinx::Configuration.instance.index_options[:min_prefix_len]
  
  ##
  # Populates the table from a Sphinx stop words file.
  #
  # This method will delete from the database any words not in the stop file,
  # add those that are not present yet and leave those that are already present.
  #
  # The stop words file is a plain text file with one word per line, as
  # generated by the Sphinx `indexer` binary when run with the --buildstops
  # option.
  #
  # @param [String] path Path to the stop words file
  # @return [Fixnum] Resulting number of word records in the database
  #
  def self.from_stop_words_file!(path)
    raise Exception, "Stop words file \"#{path}\" not found" unless File.exists?(path)
    
    stop_words = File.open(path, "r").collect do |line|
      line.sub(Regexp.new("#{$/}$"), '') # Remove line separator
    end
    
    stop_words.reject! do |word|
      word.length < ThinkingSphinx::Configuration.instance.index_options[:min_prefix_len] || 
      word.match(/^\d+$/) # Ignore numbers
    end
    
    self.delete_all([ 'text NOT IN (?)', stop_words ])

    stop_words.each do |word|
      # This will silently fail validation if the word is already in the db.
      self.create(:text => word) 
    end
    
    self.count
  end
  
  ##
  # ThinkingSphinx index block
  #
  define_index do
    indexes text
  end
end
