1. europeana 1914-1918
2. suggested ruby install
3. setup the 1914-1918 project
4. configurations
5. environments
6. initializers
7. create db and populate with initial values
8. update the js localization files
9. clear js & css cache
10. start the server



europeana 1914-1918
===================
europeana 1914-1918 uses a ruby on rails application based on runcoco
originally developed as cococo by richard doe, http://projects.oucs.ox.ac.uk/runcoco/,
for oxford univerty’s great war archive, http://www.oucs.ox.ac.uk/ww1lit/gwa/.

in 2012-01 europeana began an iterative enhancement to the application that
created a diversion from the original runcoco software and the one being used
by europeana today.



suggested ruby install
======================
use rvm, http://rvm.io/
an article for ubuntu - http://ryanbigg.com/2010/12/ubuntu-ruby-rvm-rails-and-you/


install if necessary
--------------------
$ which curl
$ /usr/bin/curl

# if curl is not available
$ sudo apt-get install curl


install rvm - ubuntu
--------------------
$ curl -L get.rvm.io | bash -s stable --autolibs=packages
$ . ~/.bash_profile

# find and install required packages (including git via build-essential)
rvm requirements

# Linux only
sudo apt-get install build-essential openssl libreadline6 libreadline6-dev \
curl git-core zlib1g zlib1g-dev libssl-dev libyaml-dev libsqlite3-dev sqlite3 \
libxml2-dev libxslt-dev autoconf libc6-dev ncurses-dev automake libtool bison  \
subversion pkg-config


install rvm - mac os x
----------------------
$ curl -L get.rvm.io | bash -s stable --autolibs=homebrew --ignore-dotfiles

rvm uses a package manager to insure dependencies are installed. mac os x does
not come with a package manager, thus here i am recommending homebrew
http://mxcl.github.io/homebrew/, if rvm does not find a package manager it will
attempt to install and use macports.

the --ignore-dotfiles stops rvm from creating a .bash_profile and .bashrc file.
the functionality of these can be created manually as indicated below.

.bash_profile
create or add to a ~/.bash_profile file with the following :
# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"

.bashrc
instead of creating a .bashrc file with the following in it : PATH=$PATH:$HOME/.rvm/bin
create a file called rvm in /etc/paths.d
$ sudo touch rvm
with the following contents in it :
/Users/dan/.rvm/bin


install ruby with rvm
---------------------
any 1.8 or 1.9 version should work
$ rvm install 1.9.3



setup the 1914-1918 project
===========================
check out project
-----------------
$ svn checkout https://europeanalabs.eu/svn/europeana1914-1918/trunk /project-path
$ cd /project-path


create a gemset for the project
-------------------------------
$ rvm gemset create 1914


create a .ruby-version file
---------------------------
$ nano .ruby-version
with the following in it :
1.9.3


create a .ruby-gemset file
--------------------------
$ nano .ruby-gemset
with the following in it
1914


confirm ruby version and gemset
-------------------------------
$ cd ..
$ cd /project-path
$ rvm info
confirm that the ruby version and gemset match what you expect


bundle install
--------------
bundle install, installs several packages for ruby that the project requires
$ cd /project-path
$ rm Gemfile.lock
$ bundle install

# some ubuntu issues
# from project root (requires git):
# Ubuntu: if this fails because of "curb" run the following 2 lines:
$ sudo apt-get install libcurl3 libcurl3-gnutls libcurl4-openssl-dev
$ gem install curb
# ...then try to run bundle install again
# Ubuntu: if this fails because of "mysql2" then try this:
$ sudo apt-get install libmysql-ruby libmysqlclient-dev
# ...and this
$ gem install mysql2
# ...then try to run bundle install again



configurations
==============
the following commands assume that you are at the root path of the project

create a db config
------------------
$ cp config/database.yml.example config/database.yml
edit the file as appropriate
make sure the socket location is correct, e.g. /tmp/mysql.sock
if you run into a mysql2/client.rb:44:in `connect': can't convert Fixnum into String (TypeError) you may need to place quotes around the databasename, username or password in database.yml


create a sphinx config
----------------------
$ cp config/sphinx.yml.example config/sphinx.yml
edit the file as appropriate



environments
============
the following commands assume that you are at the root path of the project

create environment config
-------------------------
$ cp config/environments/development.rb.example config/environments/development.rb



initializers
============
the following commands assume that you are at the root path of the project

create europeana config
-----------------------
$ cp config/initializers/europeana.rb.example config/initializers/europeana.rb
edit the file and make sure it contains a valid europeana api key


create search suggestions config
--------------------------------
$ cp config/initializers/search_suggestions.rb.example config/initializers/search_suggestions.rb
edit the file and make sure the recommended settings are uncommented by removing the #


create secret token
-------------------
$ cp config/initializers/secret_token.rb.example config/initializers/secret_token.rb
edit the file and make sure the token is a phrase of at least 30 characters within quotes


create thinking sphinx config
-----------------------------
$ cp config/initializers/thinking_sphinx.rb.example config/initializers/thinking_sphinx.rb


make initial schema available
-----------------------------
$ cp /project-path/config/db/schema-example.rb /project-path/config/db/schema.rb



create db and populate with initial values
==========================================
instead of the following :
# $ bundle exec rake db:create
# $ bundle exec rake db:schema:load
# $ bundle exec rake db:migrate
# $ bundle exec rake db:seed

run this :
$ bundle exec rake db:setup  # creates the db if it does not exist
or
$ bundle exec rake db:reset  # drops the db if it exists



update the js localization files
================================
$ bundle exec rake i18n:js:export



clear js & css cache
====================
$ bundle exec rake assets:expire



start the server
================
rails server
# or
rails s



some ruby extras
================
show rake tasks available
-------------------------
$ bundle exec rake --tasks





not sure where these instructions belong at the moment


#_____________________________
#
#  ImageMagick (installed already) PUT ON PATH
#_____________________________
#


# On a Mac, a 1-line file in /etc/paths.d will be added to the path.  Imagemagick lives in /opt/local/bin, therefore:

cd /etc/paths.d

sudo nano opt
  /opt/local/bin





import a production db dump
===========================
$ mysql cococo < Downloads/2012-04-23-cococo.sql



#_____________________________
#
#  Project Theme Setup
#_____________________________
#

(1)	copy everything under:
		public/themes/v2 
	to:
		public/themes/v_new_theme


(2)	copy everything under:
  		themes/v2 
	to:
  		themes/v_new_theme


(3) Text replace "v2" with "v_new_theme" in the following files:

	themes/v3/views/contributions/_search-results.html.erb			
	themes/v3/views/layouts/_footer.html.erb
	themes/v3/views/layouts/_header.html.erb
	themes/v3/views/layouts/_links.html.erb
	themes/v3/views/layouts/_scripts.html.erb


(4) NOTE: if you base your theme on v3 rather than v2 then step 3 is not needed.







#_____________________________
#
#  Ruby Use
#_____________________________
#

# use a GemSet

rvm use 1.9.3@andy --create --default

# freeze versions and create a gem configuration file see here:
# http://ruby.railstutorial.org/ruby-on-rails-tutorial-book#top


#_____________________________
#
#  Git Use
#_____________________________
#

# One-off, per machine

git config --global user.name "andyjmaclean"
git config --global user.email andyjmaclean@gmail.com
git config --global alias.co checkout

# cd to root of project and run

git init

# (configure .gitignore ???)

# add and commit (locally)

git add .
git commit -m "Initial commit"

# commit (remote) is done with

git push

# check status

git status

# revert (-f) or checkout

git checkout -f



#_____________________________
#
#  Heroku Use
#_____________________________
#

# login

heroku login


# run from project root

heroku create


# send src

git push heroku master

# Messgae if you forget to call "heroku create" 
#   fatal: 'heroku' does not appear to be a git repository
#   fatal: The remote end hung up unexpectedly


# Migrate data

heroku run rake db:migrate

# open browser to view

heroku open




#_____________________________
#
#  Terminal Configuration
#_____________________________
#

# Bash shells read a different profile depending if run locally or ssh-ed into remotely.
#
#
# (menu) Edit | Profile Preferences
# then
# (tab) Title and Command
# check "Run command as a login temrinal"


#_____________________________
#
#  Sphinx Installation
#_____________________________
#

# install

sudo apt-get install sphinxsearch

# configure

# see Dan

# activate (change "START=no" to "START=yes" here)

nano /etc/default/sphinxsearch



#_____________________________
#
#  Eclipse Setup
#_____________________________
#

# (menu) Help | Install New Software...
#
# (select) work with:
#
#   Indigo - http://download.eclipse.org/releases/indigo
#   Indigo - http://download.eclipse.org/releases/juno
#   etc.
#
# Check this:
#   Programming Languages ->     Dynamic Languages Toolkit - Ruby Development Tools
#
# (restart)
#
# (toolbar) Run Configurations...
# (select) Ruby Script
# (button) New Launch Configuration...
# (tab) Interpreter
# (button) Installed Interpreters
# (button) Add
# Add a line like the following, give a name, save and delete redundant configuration

~/.rvm/rubies/ruby-1.9.3-p392/bin/ruby



#_____________________________
#
#  Database Setup
#_____________________________
#




