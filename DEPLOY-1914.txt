
===   history   ===
2012-01-12 jaclu added setup instructions
2012-01-09 jaclu initial far from complete version
2012-01-17 dan entous : added redirects
2012-01-24 dan entous : added secret token and db migrate
2012-01-26 jaclu: started to list system dependencies
2012-01-31 jaclu: cleanup



===   Background   ===

Currently there is no obvious way to actually install this software,
here I am trying to document the steps needed for a fresh start.
This is a work in progress for the moment...

===   setup environment   ===

---   Pre requisits   ---  
  = imagemagick =
      http://www.imagemagick.org/
	  aptitude install imagemagic
      
	  make sure jpeg deligate is installed : at console "convert -list configure",
	  you should see something like this : "DELEGATES     bzlib jpeg x11 xml zlib"
	  
	  if not you'll need to install the jpeg delegate library
	  http://www.imagemagick.org/download/delegates/jpegsrc.v8b.tar.gz
	  
	  and then re-run ImageMagick/GraphicsMagick's ./configure script
	  sudo make and sudo make install

   = sphinx =
      http://sphinxsearch.com/downloads/release/
      
      Download and install Sphinx as per system OS/distribution convention, so 
      that its binaries, including "indexer" are available on the environment 
      path. 
      

---   Install ruby   ---
aptitude install ruby-dev rubygems libopenssl-ruby
gem install rdoc-data bundle rake
  
  it seems you dont need to do the aditional steps rdoc-data suggests



===   prepare 1418 site   ===

checkout this sourcetree

[in 1914 topdir]

--- for updates ---
  rm Gemfile~
  rm Gemfile.lock
  rm .bundle -r
  rm ts\:config -r


bundle install  [user needs sudo privs]

make sure no errors or warnings, if you get some try to solve and add
a note to this doc




===   Config of 1418 site   ===
---   setup database   ---

In config/database.yml make sure you have prepared both development
AND test with database,user and pw.   All doc tells you to only do development, but in order to
run this test is also needed. 
The test database will be created in the db:create step below, nothing
will actually be put into it. To make life easier for you keep the
dev,test and prod database privs separate, so you are sure how your
system talks to your db.


at prompt:

rake db:create  
rake db:schema:load
rake db:sessions:create


---		configuring sphinx		---

			1. make sure the sphinx.conf file exists in the sphinx application directory,
				 e.g., /usr/local/sphinx/etc/sphinx.conf if not,
				 $ sudo cp /usr/local/sphinx/etc/sphinx.conf.dist to /usr/local/sphinx/etc/sphinx.conf
			
			2. test the db connection with a db user for sphinx
				 - make sure a test database exists in mysql for testing sphinx, e.g., db=test
				 - make sure the db does not have the tables, documents or tags, in it
				 - make sure there is a user sphinx can use to access the test db, e.g., un=sphinx
				 - at the command line populate the mysql test db with the example.sql provided in the
				   sphinx distribution
					 $ /usr/local/sphinx/etc/mysql -u sphinx -p < example.sql
				 - this should populate the mysql test db with two tables : documents and tags
			
			3. edit the sphinx.conf file and make sure the following settings are correct
				 - sql_host
				 - sql_user
				 - sql_pass
				 - sql_db
				 - sql_port
			
			4. create an index on the mysql test db, at the commandline
				 $ sudo indexer --all
			
			5. make sure the search daemon is running, at the commandline
				 $ sudo searchd
				 
			6. verify api
				 - in the sphinx src there's a dir api
				 - run the php script api/php test.php test to verify connection via the api to sphinx			
			


--- configuring sphinx environ for this site ---

      From the RunCoCo application installation directory, at the commandline :
			
				1. create a development.sphinx.conf and/or production.sphinx.conf file
					 in the /config directory. nb: this file is generated with the commands
					 below and uses the database.yml settings to determine how to connect to
					 the database for each environment
					 
					--trace at the end of the commands is optional
					 
					- for development, at commandline
						$ rake ts:config --trace
							
					- for production, at commandline
						$RAILS_ENV=production rake ts:config --trace
					 
				2. start sphinx at the commandline :
						$ rake ts:start --trace
					 
				3. stop sphinx at the commandline :
						$ rake ts:stop --trace
					 
				4. creating the first index using the commandline :
						$ rake ts:index
				
				
				reference: http://freelancing-god.github.com/ts/en/rake_tasks.html
			
			
			***  richard doe’s notes ***
			From the RunCoCo application installation directory, run:
			
        RAILS_ENV=production bundle exec ts:config
        
      Configure Sphinx to use the configuration file generated by the above --
      "$RAILS_ROOT/config/production.sphinx.conf" -- where $RAILS_ROOT is the
      RunCoCo installation directory (and assuming the production environment).
      
      Create an initial index of the database by running:
      
        RAILS_ENV=production bundle exec ts:index
      
      Start Sphinx as a system service/daemon, and configure to start on system
      boot. Restart the RunCoCo web application/service/daemon.


---    directories that the web service needs write access on (and all their contents)  ---

	private/attachments
	public/attachments
	tmp
	log
	public/images/users
	
---    files that the web service needs write access to  ---	

	public/javascripts/translations.js (can start out as a blank file)
	

===   running server interactivly   ===
[in 1914 topdir]

rails server


===   running it behind apache   ===

install passanger apache stuff, described in
http://www.modrails.com/install.html

gem install passanger

To actually update the apache stuff, you need to run:
    passenger-install-apache2-module
 the output of this will help you with dependencies and apache config


===   remove all installed stuff, so we can redo installation   ===

--- clear gems ---
- nicer aproach -
gem list | cut -d" " -f1 | xargs gem uninstall -aIx

- brutal aproach -
rm /usr/lib/ruby -r

- clear dot dir cache -
rm ~/.gem -r

---   uninstall ruby   ---
aptitude remove ruby-dev rubygems rubygems-doc rubygems1.8 ruby1.8

dpkg --get-selections | grep ruby
'dpkg -P' on all remaining packets





=== secret_token ===
/config/initializers/secret_token.rb
change CoCoCo::Application.config.secret_token
to RunCoCo::Application.config.secret_token


===    db updates    ===
Run `bundle exec rake db:migrate` on existing installations to :
    1. apply changes to db structure for contribution/attachment field distinction.
    2. make existing fields contributor-editable, and set them as applicable to the story, digital object or both.


===    user picture images    ===
create the directory "public/images/users"
make sure the webserver has write access on the directory


===    backup site documents    ===
these directories contain data uploaded by users and need to be backed-up
	
	private/attachments
	public/attachments
	public/images/users


===  redirects  ===
the following redirects will need to be implement on production at deployment.
need some help in regards to writing them so that the root domain is inferred
based on a regex so that the same .htaccess file can be used on development,
test and production

/en/browse -> /en/explore 301
/de/browse -> /de/explore 301

/en/help -> /en/contributor 301
/de/help -> /de/contributor 301

/en/help/collections ->  410
/de/help/collections ->  410

/en/help/demo ->  /en/contributor 301
/de/help/demo ->  /de/contributor 301

/en/help/form ->  /en/contributor 301
/de/help/form ->  /de/contributor 301

/en/help/privacy -> /en/about/privacy 301
/de/help/privacy -> /de/about/privacy 301

/en/help/search -> /en/explore 301
/de/help/search -> /de/explore 301

/en/library -> /en/about 301
/de/library -> /de/about 301



===  maintenace message  ===
/views/layouts/application.html.erb
<div id="maintenance-message">Due to system maintenance it’s currently not possible to register as a user or add content to the archive</div>


== production set env ==
set env = production
